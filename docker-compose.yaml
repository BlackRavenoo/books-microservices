version: '3.6'

services:
  postgres:
    image: debezium/postgres:17-alpine
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-password}
      - POSTGRES_MULTIPLE_DATABASES=${METADATA_DB:-book_catalog},${AUTH_DB:-auth_service}
    volumes:
      - pg_data:/var/lib/postgresql/data
      - ./infra/init-dbs.sh:/docker-entrypoint-initdb.d/init-dbs.sh
    healthcheck:
      test: pg_isready -U ${POSTGRES_USER:-postgres} -d ${METADATA_DB:-book_catalog}
      interval: 10s
      timeout: 5s
      retries: 5

  zookeeper:
    image: confluentinc/cp-zookeeper:7.9.0
    restart: on-failure
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181

  kafka:
    image: confluentinc/cp-kafka:7.9.0
    depends_on:
      - zookeeper
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
    ports:
      - "9092:9092"

  connect:
    build:
      context: ./kafka-connect
    depends_on:
      - kafka
      - elasticsearch
    environment:
      - CONNECT_REST_ADVERTISED_HOST_NAME="connect"
      - CONNECT_BOOTSTRAP_SERVERS=kafka:9092
      - CONNECT_GROUP_ID=connect-cluster
      - CONNECT_CONFIG_STORAGE_TOPIC=connect-configs
      - CONNECT_OFFSET_STORAGE_TOPIC=connect-offsets
      - CONNECT_STATUS_STORAGE_TOPIC=connect-status
      - CONNECT_KEY_CONVERTER=org.apache.kafka.connect.json.JsonConverter
      - CONNECT_VALUE_CONVERTER=org.apache.kafka.connect.json.JsonConverter
      - CONNECT_PLUGIN_PATH=/usr/share/java,/usr/share/confluent-hub-components
      - CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR=1
      - CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR=1
      - CONNECT_STATUS_STORAGE_REPLICATION_FACTOR=1

      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-password}
      - POSTGRES_DB=${METADATA_DB:-book_catalog}
    ports:
      - "8083:8083"
    volumes:
      - ./kafka-connect/connector-configs:/etc/kafka-connect/connector-configs
      - ./kafka-connect/start-connect.sh:/etc/kafka-connect/start-connect.sh
    command: ["bash", "/etc/kafka-connect/start-connect.sh"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8083/"]
      interval: 10s
      timeout: 5s
      retries: 5

  elasticsearch:
    image: elasticsearch:8.17.5
    environment:
      discovery.type: single-node
      ES_JAVA_OPTS: -Xms512m -Xmx512m
      xpack.security.enabled: false
    ports:
      - "9200:9200"
    volumes:
      - es_data:/usr/share/elasticsearch/data
    healthcheck:
      test: ["CMD-SHELL", "curl -s http://localhost:9200/_cluster/health | grep -q '\"status\":\"green\"\\|\"status\":\"yellow\"'"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
    volumes:
      - ./infra/nginx.conf:/etc/nginx/nginx.conf
      - ./services/frontend/dist:/usr/share/nginx/html
    depends_on:
      - api-gateway

  book-catalog:
    build:
      context: .
      dockerfile: services/book-catalog/Dockerfile
    depends_on:
      elasticsearch:
        condition: service_healthy
      postgres:
        condition: service_healthy
    ports:
      - "4001:5000"
    environment:
      - APP_DATABASE__HOST=postgres
      - APP_DATABASE__PASSWORD=${POSTGRES_PASSWORD:-password}
      - APP_DATABASE__DATABASE_NAME=${POSTGRES_DB:-book_catalog}
      - APP_DATABASE__PORT=${POSTGRES_PORT:-5432}
      - APP_SEARCH__URL=http://elasticsearch:9200
      - APP_S3__ACCESS_KEY=${S3_ACCESS_KEY}
      - APP_S3__SECRET_KEY=${S3_SECRET_KEY}
      - APP_S3__REGION=ru-central-1
      - APP_S3__ENDPOINT=https://s3.cloud.ru
    healthcheck:
      test: ["CMD", "curl", "-f", "http://127.0.0.1:5000/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  api-gateway:
    build:
      context: .
      dockerfile: services/api-gateway/Dockerfile
    depends_on:
      book-catalog:
        condition: service_healthy
    ports:
      - "4999:5000"
    environment:
      - APP_SERVICES__BOOK_CATALOG__URL=http://book-catalog:5000

  auth-service:
    build:
      context: .
      dockerfile: services/auth-service/Dockerfile
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "5001:5000"
    volumes:
      - ./services/auth-service/keys:/app/server/keys
    environment:
      - APP_DATABASE__HOST=postgres
      - APP_DATABASE__PASSWORD=${POSTGRES_PASSWORD:-password}
      - APP_DATABASE__DATABASE_NAME=${AUTH_DB:-auth_service}
      - APP_DATABASE__PORT=${POSTGRES_PORT:-5432}
      - APP_DATABASE__REQUIRE_SSL=false
      - APP_REDIS__URL=redis://redis:6379

volumes:
  pg_data:
  es_data:
  redis_data: